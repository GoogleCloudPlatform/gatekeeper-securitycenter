# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Release

on:
  push:
    tags:
    - 'v*-rc*'

jobs:
  release:
    runs-on: ubuntu-latest
    env:
      CGO_ENABLED: '0'

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup Go
      uses: actions/setup-go@v1
      with:
        go-version: 1.15

    - name: Restore dependency cache
      uses: actions/cache@v2
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Set env vars
      run: |
        MODULE_NAME=$(go list | tr '[:upper:]' '[:lower:]')
        echo IMAGE_NAME=${MODULE_NAME##*/} >> $GITHUB_ENV
        echo IMAGE_REPO=$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]') >> $GITHUB_ENV
        RC_TAG=${GITHUB_REF##*/}
        echo TAG_NAME=${RC_TAG%%-rc*} >> $GITHUB_ENV

    - name: Set flags
      run: |
        echo GOFLAGS="-mod=readonly -ldflags=-X=$(go list)/cmd/version.Version=$TAG_NAME" >> $GITHUB_ENV

    - name: Print env
      run: |
        go env

    - name: Test
      run: go test -v -count=1 -timeout=10m -vet="asmdecl,assign,atomic,bools,buildtag,cgocall,composites,copylocks,errorsas,httpresponse,loopclosure,lostcancel,nilfunc,printf,shift,stdmethods,structtag,tests,unmarshal,unreachable,unsafeptr,unusedresult" ./...

    - name: Build binaries
      run: |
        GOOS=darwin GOARCH=amd64 go build -o gatekeeper-securitycenter_darwin_amd64 .
        GOOS=linux GOARCH=amd64 go build -o gatekeeper-securitycenter_linux_amd64 .
        GOOS=linux GOARCH=arm64 go build -o gatekeeper-securitycenter_linux_arm64 .

    - name: Create checksums
      run: shasum -a 256 gatekeeper-securitycenter_* > SHA256SUMS

    - name: Install ko
      run: |
        mkdir -p $(go env GOPATH)/bin
        curl -sSL "https://github.com/google/ko/releases/download/v0.7.2/ko_0.7.2_Linux_x86_64.tar.gz" | tar -xzC $(go env GOPATH)/bin ko

    - name: Build and push container image
      run: |
        $(go env GOPATH)/bin/ko login docker.pkg.github.com -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
        echo -n 'IMAGE_WITH_DIGEST=' >> $GITHUB_ENV
        $(go env GOPATH)/bin/ko publish . --base-import-paths --platform linux/amd64 --tags latest,$TAG_NAME >> $GITHUB_ENV
      env:
        KO_DOCKER_REPO: docker.pkg.github.com/${{ env.IMAGE_REPO }}

    - name: Create release body file
      run: |
        cat << EOF > ${{ runner.temp }}/body.md
        ## Images

        Google Container Registry:

            gcr.io/cloud-solutions-images/$IMAGE_NAME:$TAG_NAME (multi-arch)

        GitHub Packages:

            docker.pkg.github.com/$IMAGE_REPO/$IMAGE_NAME:$TAG_NAME (linux/amd64)
            ${IMAGE_WITH_DIGEST##*@}
        EOF

    - name: Create release branch
      run: |
        git checkout -B release-$TAG_NAME

    - name: Set new image tag
      uses: docker://gcr.io/kpt-dev/kpt:v0.37.1
      with:
        args: cfg set manifests image gcr.io/cloud-solutions-images/${{ env.IMAGE_NAME }}:${{ env.TAG_NAME }}

    - name: Commit manifest with image tag
      run: |
        git config user.name github-actions
        git config user.email github-actions@github.com
        git add manifests
        git commit -m "$TAG_NAME"
        git push --force origin release-$TAG_NAME
        echo COMMITISH=$(git rev-parse HEAD) >> $GITHUB_ENV

    - name: Create release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.TAG_NAME }}
        release_name: ${{ env.TAG_NAME }}
        body_path: ${{ runner.temp }}/body.md
        commitish: ${{ env.COMMITISH }}

    - name: Upload binary darwin amd64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: gatekeeper-securitycenter_darwin_amd64
        asset_name: gatekeeper-securitycenter_darwin_amd64
        asset_content_type: application/octet-stream

    - name: Upload binary linux amd64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: gatekeeper-securitycenter_linux_amd64
        asset_name: gatekeeper-securitycenter_linux_amd64
        asset_content_type: application/octet-stream

    - name: Upload binary linux arm64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: gatekeeper-securitycenter_linux_arm64
        asset_name: gatekeeper-securitycenter_linux_arm64
        asset_content_type: application/octet-stream

    - name: Upload checksum file
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: SHA256SUMS
        asset_name: SHA256SUMS
        asset_content_type: text/plain
