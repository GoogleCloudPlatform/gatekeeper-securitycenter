# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Release

on:
  push:
    tags:
    - 'v[0-9]+.[0-9]+.[0-9]+-rc[0-9]+'
    paths-ignore:
    - '**.md'
    - 'docs/**'

jobs:
  release:
    runs-on: ubuntu-latest

    env:
      CGO_ENABLED: '0'
      KO_VERSION: '0.9.3'
      KPT_VERSION: v1.0.0-beta.7
      REGISTRY: ghcr.io

    permissions:
      contents: write
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup Go
      uses: actions/setup-go@v1
      with:
        go-version: 1.16

    - name: Restore dependency cache
      uses: actions/cache@v2
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Set image env vars
      run: |
        echo IMAGE_REPO=$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]') >> $GITHUB_ENV
        RC_VERSION=${GITHUB_REF#refs/tags/}
        echo VERSION=${RC_VERSION%-rc*} >> $GITHUB_ENV

    - name: Print env
      run: |
        go env

    - name: Run unit tests
      run: |
        go test -v -count=1 -short -timeout=5m -vet=asmdecl,assign,atomic,bools,buildtag,cgocall,composites,copylocks,errorsas,httpresponse,loopclosure,lostcancel,nilfunc,printf,shift,stdmethods,structtag,tests,unmarshal,unreachable,unsafeptr,unusedresult ./...

    - name: Install ko
      run: |
        mkdir -p ${HOME}/.local/bin
        curl -sSL "https://github.com/google/ko/releases/download/v${KO_VERSION}/ko_${KO_VERSION}_Linux_x86_64.tar.gz" | tar -xzC ${HOME}/.local/bin ko

    - name: Install kpt
      run: |
        mkdir -p ${HOME}/.local/bin
        curl -sSLo ${HOME}/.local/bin/kpt "https://github.com/GoogleContainerTools/kpt/releases/download/${KPT_VERSION}/kpt_linux_amd64"
        chmod +x ${HOME}/.local/bin/kpt

    - name: Create release branch
      run: |
        git checkout -B release-$VERSION

    - name: Populate version number in embedded file
      run: |
        echo "$VERSION" > pkg/version/version.txt

    - name: Commit and push to release branch with new version number
      run: |
        git add pkg/version/version.txt
        git config user.name github-actions
        git config user.email github-actions@github.com
        git commit -m "Update binary version to $VERSION"
        git push --force origin release-$VERSION

    - name: Set build env vars
      run: |
        echo BUILD_REVISION=$(git rev-parse HEAD) >> $GITHUB_ENV

    - name: Set Go flags
      run: |
        echo GOFLAGS="-v -trimpath -ldflags=-s" >> $GITHUB_ENV

    - name: Build binaries
      run: |
        GOOS=darwin GOARCH=amd64 go build -o gatekeeper-securitycenter_Darwin_x86_64 .
        GOOS=darwin GOARCH=arm64 go build -o gatekeeper-securitycenter_Darwin_arm64 .
        GOOS=linux GOARCH=amd64 go build -o gatekeeper-securitycenter_Linux_x86_64 .
        GOOS=linux GOARCH=arm64 go build -o gatekeeper-securitycenter_Linux_aarch64 .

    - name: Create checksums
      run: shasum -a 256 gatekeeper-securitycenter_* > SHA256SUMS

    - name: Build and push container image
      run: |
        ko login $REGISTRY -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
        echo -n 'IMAGE_NAME_WITH_DIGEST=' >> $GITHUB_ENV
        ko publish . \
          --bare \
          --image-label org.opencontainers.image.description="Report Anthos Config Management Policy Controller and Open Policy Agent Gatekeeper audit violations in Security Command Center." \
          --image-label org.opencontainers.image.licenses="Apache-2.0" \
          --image-label org.opencontainers.image.revision="$BUILD_REVISION" \
          --image-label org.opencontainers.image.source="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}" \
          --image-label org.opencontainers.image.title="${GITHUB_REPOSITORY#*/}" \
          --image-label org.opencontainers.image.vendor="Google LLC" \
          --image-label org.opencontainers.image.version="$VERSION" \
          --platform linux/amd64,linux/arm64 \
          --tags $VERSION \
          >> $GITHUB_ENV
      env:
        KO_DOCKER_REPO: ${{ env.REGISTRY }}/${{ env.IMAGE_REPO }}

    - name: Create release body file
      run: |
        cat << EOF > ${{ runner.temp }}/body.md
        ## Images

        GitHub Container Registry:

            $REGISTRY/$IMAGE_REPO:$VERSION@${IMAGE_NAME_WITH_DIGEST##*@}
        EOF

    - name: Set image name in Kubernetes resource spec
      run: |
        kpt fn eval manifests \
          --image gcr.io/kpt-fn/apply-setters:v0.2 \
          -- \
          "image=$REGISTRY/$IMAGE_REPO:$VERSION@${IMAGE_NAME_WITH_DIGEST##*@}"

    - name: Update version in manifest readme
      run: |
        sed -i "s/VERSION=.*/VERSION=$VERSION/" manifests/README.md

    - name: Commit and push to release branch with new version and image ref
      run: |
        git add manifests
        git config user.name github-actions
        git config user.email github-actions@github.com
        git commit -m "Update image version in manifest to $VERSION"
        git push --force origin release-$VERSION

    - name: Set release env vars
      run: |
        echo COMMITISH=$(git rev-parse HEAD) >> $GITHUB_ENV

    - name: Create release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.VERSION }}
        release_name: ${{ env.VERSION }}
        body_path: ${{ runner.temp }}/body.md
        commitish: ${{ env.COMMITISH }}

    - name: Upload binary darwin amd64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: gatekeeper-securitycenter_Darwin_x86_64
        asset_name: gatekeeper-securitycenter_Darwin_x86_64
        asset_content_type: application/octet-stream

    - name: Upload binary darwin arm64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: gatekeeper-securitycenter_Darwin_arm64
        asset_name: gatekeeper-securitycenter_Darwin_arm64
        asset_content_type: application/octet-stream

    - name: Upload binary linux amd64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: gatekeeper-securitycenter_Linux_x86_64
        asset_name: gatekeeper-securitycenter_Linux_x86_64
        asset_content_type: application/octet-stream

    - name: Upload binary linux arm64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: gatekeeper-securitycenter_Linux_aarch64
        asset_name: gatekeeper-securitycenter_Linux_aarch64
        asset_content_type: application/octet-stream

    - name: Upload checksum file
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: SHA256SUMS
        asset_name: SHA256SUMS
        asset_content_type: text/plain

    - name: Update version in manifest readme on main branch
      run: |
        git config user.name github-actions
        git config user.email github-actions@github.com
        git reset --hard
        git remote update
        git checkout main
        git pull --no-edit --no-rebase --strategy-option=theirs origin
        sed -i "s/VERSION=.*/VERSION=$VERSION/" manifests/README.md
        git add manifests/README.md
        git commit -m "Update version in readme to $VERSION"
        git pull --no-edit --no-rebase --strategy-option=ours origin
        git push origin main
